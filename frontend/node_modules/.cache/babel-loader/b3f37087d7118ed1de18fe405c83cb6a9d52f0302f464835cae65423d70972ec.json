{"ast":null,"code":"var _jsxFileName = \"/home/neeraj/Downloads/mlmmain (1)/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { mockUsers } from '../mock/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const savedUser = localStorage.getItem('mlm_user');\n    const savedIsAdmin = localStorage.getItem('mlm_isAdmin');\n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n      setIsAdmin(savedIsAdmin === 'true');\n    }\n    setIsLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Mock login validation\n      if (email === 'admin@mlm.com' && password === 'admin123') {\n        const adminUser = {\n          id: 'admin',\n          email: 'admin@mlm.com',\n          fullName: 'Admin User',\n          username: 'admin',\n          isAdmin: true\n        };\n        setUser(adminUser);\n        setIsAdmin(true);\n        localStorage.setItem('mlm_user', JSON.stringify(adminUser));\n        localStorage.setItem('mlm_isAdmin', 'true');\n        return {\n          success: true,\n          isAdmin: true\n        };\n      }\n\n      // Regular user login\n      const foundUser = mockUsers.find(u => u.email === email);\n      if (foundUser && password === 'password123') {\n        setUser(foundUser);\n        setIsAdmin(false);\n        localStorage.setItem('mlm_user', JSON.stringify(foundUser));\n        localStorage.setItem('mlm_isAdmin', 'false');\n        return {\n          success: true,\n          isAdmin: false\n        };\n      }\n      return {\n        success: false,\n        message: 'Invalid credentials'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Login failed'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      // Mock registration\n      const newUser = {\n        id: `user_${Date.now()}`,\n        ...userData,\n        joinDate: new Date().toISOString().split('T')[0],\n        isActive: true,\n        rank: 'Bronze',\n        totalEarnings: 0,\n        currentBalance: 0,\n        totalWithdrawn: 0,\n        directReferrals: 0,\n        totalTeamSize: 0,\n        referralLink: `https://mlm-system.com/ref/${userData.username}`\n      };\n\n      // Add to mock users (in real app, this would be API call)\n      mockUsers.push(newUser);\n      setUser(newUser);\n      setIsAdmin(false);\n      localStorage.setItem('mlm_user', JSON.stringify(newUser));\n      localStorage.setItem('mlm_isAdmin', 'false');\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: 'Registration failed'\n      };\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    setIsAdmin(false);\n    localStorage.removeItem('mlm_user');\n    localStorage.removeItem('mlm_isAdmin');\n  };\n  const updateUser = updatedData => {\n    const updatedUser = {\n      ...user,\n      ...updatedData\n    };\n    setUser(updatedUser);\n    localStorage.setItem('mlm_user', JSON.stringify(updatedUser));\n  };\n  const value = {\n    user,\n    isAdmin,\n    isLoading,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"LC/2hSJUtMc3W4cw6tHK8rvzU04=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","mockUsers","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","isLoading","setIsLoading","isAdmin","setIsAdmin","savedUser","localStorage","getItem","savedIsAdmin","JSON","parse","login","email","password","adminUser","id","fullName","username","setItem","stringify","success","foundUser","find","u","message","error","register","userData","newUser","Date","now","joinDate","toISOString","split","isActive","rank","totalEarnings","currentBalance","totalWithdrawn","directReferrals","totalTeamSize","referralLink","push","logout","removeItem","updateUser","updatedData","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/neeraj/Downloads/mlmmain (1)/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { mockUsers } from '../mock/mockData';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  useEffect(() => {\n    // Check if user is logged in from localStorage\n    const savedUser = localStorage.getItem('mlm_user');\n    const savedIsAdmin = localStorage.getItem('mlm_isAdmin');\n    \n    if (savedUser) {\n      setUser(JSON.parse(savedUser));\n      setIsAdmin(savedIsAdmin === 'true');\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      // Mock login validation\n      if (email === 'admin@mlm.com' && password === 'admin123') {\n        const adminUser = { \n          id: 'admin', \n          email: 'admin@mlm.com', \n          fullName: 'Admin User',\n          username: 'admin',\n          isAdmin: true \n        };\n        setUser(adminUser);\n        setIsAdmin(true);\n        localStorage.setItem('mlm_user', JSON.stringify(adminUser));\n        localStorage.setItem('mlm_isAdmin', 'true');\n        return { success: true, isAdmin: true };\n      }\n      \n      // Regular user login\n      const foundUser = mockUsers.find(u => u.email === email);\n      if (foundUser && password === 'password123') {\n        setUser(foundUser);\n        setIsAdmin(false);\n        localStorage.setItem('mlm_user', JSON.stringify(foundUser));\n        localStorage.setItem('mlm_isAdmin', 'false');\n        return { success: true, isAdmin: false };\n      }\n      \n      return { success: false, message: 'Invalid credentials' };\n    } catch (error) {\n      return { success: false, message: 'Login failed' };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      // Mock registration\n      const newUser = {\n        id: `user_${Date.now()}`,\n        ...userData,\n        joinDate: new Date().toISOString().split('T')[0],\n        isActive: true,\n        rank: 'Bronze',\n        totalEarnings: 0,\n        currentBalance: 0,\n        totalWithdrawn: 0,\n        directReferrals: 0,\n        totalTeamSize: 0,\n        referralLink: `https://mlm-system.com/ref/${userData.username}`\n      };\n      \n      // Add to mock users (in real app, this would be API call)\n      mockUsers.push(newUser);\n      \n      setUser(newUser);\n      setIsAdmin(false);\n      localStorage.setItem('mlm_user', JSON.stringify(newUser));\n      localStorage.setItem('mlm_isAdmin', 'false');\n      \n      return { success: true };\n    } catch (error) {\n      return { success: false, message: 'Registration failed' };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setIsAdmin(false);\n    localStorage.removeItem('mlm_user');\n    localStorage.removeItem('mlm_isAdmin');\n  };\n\n  const updateUser = (updatedData) => {\n    const updatedUser = { ...user, ...updatedData };\n    setUser(updatedUser);\n    localStorage.setItem('mlm_user', JSON.stringify(updatedUser));\n  };\n\n  const value = {\n    user,\n    isAdmin,\n    isLoading,\n    login,\n    register,\n    logout,\n    updateUser\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAE7CE,SAAS,CAAC,MAAM;IACd;IACA,MAAMkB,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IAClD,MAAMC,YAAY,GAAGF,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAExD,IAAIF,SAAS,EAAE;MACbL,OAAO,CAACS,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,CAAC;MAC9BD,UAAU,CAACI,YAAY,KAAK,MAAM,CAAC;IACrC;IACAN,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMS,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF;MACA,IAAID,KAAK,KAAK,eAAe,IAAIC,QAAQ,KAAK,UAAU,EAAE;QACxD,MAAMC,SAAS,GAAG;UAChBC,EAAE,EAAE,OAAO;UACXH,KAAK,EAAE,eAAe;UACtBI,QAAQ,EAAE,YAAY;UACtBC,QAAQ,EAAE,OAAO;UACjBd,OAAO,EAAE;QACX,CAAC;QACDH,OAAO,CAACc,SAAS,CAAC;QAClBV,UAAU,CAAC,IAAI,CAAC;QAChBE,YAAY,CAACY,OAAO,CAAC,UAAU,EAAET,IAAI,CAACU,SAAS,CAACL,SAAS,CAAC,CAAC;QAC3DR,YAAY,CAACY,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;QAC3C,OAAO;UAAEE,OAAO,EAAE,IAAI;UAAEjB,OAAO,EAAE;QAAK,CAAC;MACzC;;MAEA;MACA,MAAMkB,SAAS,GAAGjC,SAAS,CAACkC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACX,KAAK,KAAKA,KAAK,CAAC;MACxD,IAAIS,SAAS,IAAIR,QAAQ,KAAK,aAAa,EAAE;QAC3Cb,OAAO,CAACqB,SAAS,CAAC;QAClBjB,UAAU,CAAC,KAAK,CAAC;QACjBE,YAAY,CAACY,OAAO,CAAC,UAAU,EAAET,IAAI,CAACU,SAAS,CAACE,SAAS,CAAC,CAAC;QAC3Df,YAAY,CAACY,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC;QAC5C,OAAO;UAAEE,OAAO,EAAE,IAAI;UAAEjB,OAAO,EAAE;QAAM,CAAC;MAC1C;MAEA,OAAO;QAAEiB,OAAO,EAAE,KAAK;QAAEI,OAAO,EAAE;MAAsB,CAAC;IAC3D,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO;QAAEL,OAAO,EAAE,KAAK;QAAEI,OAAO,EAAE;MAAe,CAAC;IACpD;EACF,CAAC;EAED,MAAME,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnC,IAAI;MACF;MACA,MAAMC,OAAO,GAAG;QACdb,EAAE,EAAE,QAAQc,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;QACxB,GAAGH,QAAQ;QACXI,QAAQ,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAChDC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE,QAAQ;QACdC,aAAa,EAAE,CAAC;QAChBC,cAAc,EAAE,CAAC;QACjBC,cAAc,EAAE,CAAC;QACjBC,eAAe,EAAE,CAAC;QAClBC,aAAa,EAAE,CAAC;QAChBC,YAAY,EAAE,8BAA8Bd,QAAQ,CAACV,QAAQ;MAC/D,CAAC;;MAED;MACA7B,SAAS,CAACsD,IAAI,CAACd,OAAO,CAAC;MAEvB5B,OAAO,CAAC4B,OAAO,CAAC;MAChBxB,UAAU,CAAC,KAAK,CAAC;MACjBE,YAAY,CAACY,OAAO,CAAC,UAAU,EAAET,IAAI,CAACU,SAAS,CAACS,OAAO,CAAC,CAAC;MACzDtB,YAAY,CAACY,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC;MAE5C,OAAO;QAAEE,OAAO,EAAE;MAAK,CAAC;IAC1B,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd,OAAO;QAAEL,OAAO,EAAE,KAAK;QAAEI,OAAO,EAAE;MAAsB,CAAC;IAC3D;EACF,CAAC;EAED,MAAMmB,MAAM,GAAGA,CAAA,KAAM;IACnB3C,OAAO,CAAC,IAAI,CAAC;IACbI,UAAU,CAAC,KAAK,CAAC;IACjBE,YAAY,CAACsC,UAAU,CAAC,UAAU,CAAC;IACnCtC,YAAY,CAACsC,UAAU,CAAC,aAAa,CAAC;EACxC,CAAC;EAED,MAAMC,UAAU,GAAIC,WAAW,IAAK;IAClC,MAAMC,WAAW,GAAG;MAAE,GAAGhD,IAAI;MAAE,GAAG+C;IAAY,CAAC;IAC/C9C,OAAO,CAAC+C,WAAW,CAAC;IACpBzC,YAAY,CAACY,OAAO,CAAC,UAAU,EAAET,IAAI,CAACU,SAAS,CAAC4B,WAAW,CAAC,CAAC;EAC/D,CAAC;EAED,MAAMC,KAAK,GAAG;IACZjD,IAAI;IACJI,OAAO;IACPF,SAAS;IACTU,KAAK;IACLe,QAAQ;IACRiB,MAAM;IACNE;EACF,CAAC;EAED,oBACEvD,OAAA,CAACC,WAAW,CAAC0D,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnD,QAAA,EAChCA;EAAQ;IAAAqD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACvD,GAAA,CA9GWF,YAAY;AAAA0D,EAAA,GAAZ1D,YAAY;AAAA,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}