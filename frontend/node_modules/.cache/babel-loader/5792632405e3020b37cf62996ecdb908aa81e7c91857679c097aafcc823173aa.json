{"ast":null,"code":"\"use client\";\n\n// src/progress.tsx\nimport * as React from \"react\";\nimport { createContextScope } from \"@radix-ui/react-context\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar PROGRESS_NAME = \"Progress\";\nvar DEFAULT_MAX = 100;\nvar [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);\nvar [ProgressProvider, useProgressContext] = createProgressContext(PROGRESS_NAME);\nvar Progress = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeProgress,\n    value: valueProp = null,\n    max: maxProp,\n    getValueLabel = defaultGetValueLabel,\n    ...progressProps\n  } = props;\n  if ((maxProp || maxProp === 0) && !isValidMaxNumber(maxProp)) {\n    console.error(getInvalidMaxError(`${maxProp}`, \"Progress\"));\n  }\n  const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;\n  if (valueProp !== null && !isValidValueNumber(valueProp, max)) {\n    console.error(getInvalidValueError(`${valueProp}`, \"Progress\"));\n  }\n  const value = isValidValueNumber(valueProp, max) ? valueProp : null;\n  const valueLabel = isNumber(value) ? getValueLabel(value, max) : void 0;\n  return /* @__PURE__ */jsx(ProgressProvider, {\n    scope: __scopeProgress,\n    value,\n    max,\n    children: /* @__PURE__ */jsx(Primitive.div, {\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": 0,\n      \"aria-valuenow\": isNumber(value) ? value : void 0,\n      \"aria-valuetext\": valueLabel,\n      role: \"progressbar\",\n      \"data-state\": getProgressState(value, max),\n      \"data-value\": value ?? void 0,\n      \"data-max\": max,\n      ...progressProps,\n      ref: forwardedRef\n    })\n  });\n});\nProgress.displayName = PROGRESS_NAME;\nvar INDICATOR_NAME = \"ProgressIndicator\";\nvar ProgressIndicator = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeProgress,\n    ...indicatorProps\n  } = props;\n  const context = useProgressContext(INDICATOR_NAME, __scopeProgress);\n  return /* @__PURE__ */jsx(Primitive.div, {\n    \"data-state\": getProgressState(context.value, context.max),\n    \"data-value\": context.value ?? void 0,\n    \"data-max\": context.max,\n    ...indicatorProps,\n    ref: forwardedRef\n  });\n});\nProgressIndicator.displayName = INDICATOR_NAME;\nfunction defaultGetValueLabel(value, max) {\n  return `${Math.round(value / max * 100)}%`;\n}\nfunction getProgressState(value, maxValue) {\n  return value == null ? \"indeterminate\" : value === maxValue ? \"complete\" : \"loading\";\n}\nfunction isNumber(value) {\n  return typeof value === \"number\";\n}\nfunction isValidMaxNumber(max) {\n  return isNumber(max) && !isNaN(max) && max > 0;\n}\nfunction isValidValueNumber(value, max) {\n  return isNumber(value) && !isNaN(value) && value <= max && value >= 0;\n}\nfunction getInvalidMaxError(propValue, componentName) {\n  return `Invalid prop \\`max\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. Only numbers greater than 0 are valid max values. Defaulting to \\`${DEFAULT_MAX}\\`.`;\n}\nfunction getInvalidValueError(propValue, componentName) {\n  return `Invalid prop \\`value\\` of value \\`${propValue}\\` supplied to \\`${componentName}\\`. The \\`value\\` prop must be:\n  - a positive number\n  - less than the value passed to \\`max\\` (or ${DEFAULT_MAX} if no \\`max\\` prop is set)\n  - \\`null\\` or \\`undefined\\` if the progress is indeterminate.\n\nDefaulting to \\`null\\`.`;\n}\nvar Root = Progress;\nvar Indicator = ProgressIndicator;\nexport { Indicator, Progress, ProgressIndicator, Root, createProgressScope };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}